#                               flow of execution

# სანამ flow of execution-ს ვისწავლიდეთ მოდი გავარჩიოთ ინტერპრეტატორი და კომპილატორი ენები (interpreter and compilator)


# რა არის ინტერპრეტატორი და კომპილერი?
 
# იმისათვის, რომ ადამიანისთვის გასაგებ ენაზე დაწერილი პროგრამა მანქანისთვის გასაგები გახდეს გვჭირდება რაღაც რაც ადამიანისთვის გასაგებ ენაზე დაწერილი პროგრამას “გადათარგმნის” კომპიუტერისთვის გასაგენ ანუ მანქანურ ენაზე. სწორდეს ამისათვის გვჭირდება კომპილატორი ან ინტერპრეტატორი რომელიც პროგრამას გადათარგმნის მანქანისთვის გასაგებ ენზაე, ესეიგი ის ერთგვარი თარჯიმანის როლს ასრულებს ადამიანსა და მანქანას შორის.

# რა განსხვავებაა კომპილატორსა და ინტერპრეტატორს შორის?

# კომპილატორი:
# ერთიანად თარგმნის მთელ პროგრამას მანქანურ კოდში და ქმნის exe ან სხვა გაშვებად ფაილს.

# კომპილირებადი ენებია: C, C++, Go, Rust 


# ინტერპრეტატორი:
# კოდს კითხულობს და ასრულებს ხაზ-ხაზ.


# არ ქმნის ცალკე exe ფაილს — პირდაპირ ასრულებს კოდს.
# ინტერპრეტირებადი ენებია: Python, JavaScript, Ruby, PHP 

# კომპილატორი  მუშაობს ბევრად სწრაფად, რადგან ის უკვე გადათარგმნილია მანქანურ ენაზე.


# ინტერპრეტატორი შედარებით ნელია, რადგან ყოველი ხაზის დროს ხდება თარგმნა და შესრულება.


# თუ პროგრამირების სწავლას ნულიდან იწყებ საუკეთესოა ინტერპრეტატორი რადგან მარტივი სინტაქსი აქვს და ზოგადად ადამიანზეა ასეთი ენები გათვლილი რომ პროგრამისტისთვის მარტივი იყოს კოდის წერა


# კომპილერი არის ისე შექმნილი რომ კომპიუტერისთვის უფრო მარტივი იყოს ვიდრე ადამიანისთვის



# ----------------------------------------------------

# რა არის flow of execution და რატომაა მნიშვნელოვანი?

# flow of execution ნიშნავს იმას თუ რა რიგით სრულდება ბრძანებები პროგრამაში. როცა პითონში პროგრამას წერ, კოდში ბევრი ბრძანება და ფუნქციაა. აუცილებელია რომ ვიცოდეთ რომ ეს ყველა კოდი ერთდროულად არ სრულდება - რაღაც ნაწილს პითონი ასრულებს კოდის წაკითხვისთანავე მაგრამ რაღაც ნაწილს მხოლოდ მაშინ როცა საჭირო გახდება
# (ფუნქციის სახელი და მისამართი ინახება Python-ის მეხსიერებაში სპეციალურ ადგილას, რასაც ეწოდება namespace). 


# მაგ: 
def greet():  #ეს ორი ხაზი იგნორდება და არ შესრულდება სანამ არ გამოვიძახებთ
    print("hello friend")

greet()  #გამოძახების თანავე პროგრამა უბრუნდება იმ ხაზს სადაც ფუნქცია წერია და ასრულებს მას



# როგორ მუშაობს?

# 1. პროგრამა იწყებს კოდის შესრულებას თანმიმდევრობით, პირველი ხაზიდან გადადის მეორეზე, მესამეზე და ა.შ

# 2.ფუნქციები უბრალოდ ინახება, სანამ არ გამოვიძახებთ მას ფუნქცია უბრალოდ არ გაეშვება და არ მოგვცემს შედეგს

# 3. ფუნქცია ფუნქციაში - ერთი ფუნქცია შეიძლება გამოიძახოს მეორე ფუნქციამ. მაგ:

def say_hello():  # შეიქმნა პირველი ფუნქცია
    print("Hello!")

def greet(): 
    say_hello()  #მეორე ფუნქცია იძახებს პირველს 
    print("Welcome!")

greet()  #მეორე ფუნქციის გამოძახებისას შესრულდება მეორეც და პირველიც რადგან ერთი მეორის ნაწილია

# 4. ბოლოს როცა ყველა ფუნქცია და ბრძანება შესრულდება პროგრამა მთავრდება