#  conditional execution


# იმისთვის რომ ჩვენ გამოსადეგი პროგრამა დავწეროთ გვჭირდება რაიმე გზა რომ შევამოწმოთ პირობა და შევცვალოთ პროგრამის მოქმედება შესაფერისად


# conditional execution - გვაძლევს ამის შესაძლებლობას.

# if -
#  ნიშნავს "თუ"-ს

# if-ის შემდეგ დაწერილი ბულიანი გამოსახულება ეწოდება პირობა. თუ ეს პირობა ჭეშმარიტია, მაშინ შესრულდება დაინდენტებული კოდი. თუ არა — არაფერი მოხდება.


if 10 > 9:  #თუ 10 მეტია 9-ზე 
    print(True) #იპრინტება True







# alternative execution

# if განცხადების მეორე ფორმას ეწოდება ალტერნატიული შესრულება (alternative execution), როცა არსებობს ორი შესაძლო ვარიანტი და პირობა წყვეტს, რომელი შესრულდეს.  
x = 10

if x % 2 == 0:
    print('x is even')
else:
    print('x is odd')


# თუ x ორად გაყოფისას ნაშთს არ იძლევა (x % 2 == 0), მაშინ ვიცით, რომ x ლუწია, და პროგრამა ბეჭდავს შესაბამის შეტყობინებას. თუ პირობა მცდარია, მაშინ შესრულდება მეორე განცხადება.

# რადგან პირობა ან მართალია ან მცდარი, ზუსტად ერთი ვარიანტი შესრულდება. ამ ვარიანტებს ეწოდებათ ტოტები (branches), რადგან ისინი წარმოადგენენ შესრულების ნაკადის ტოტებად გაყოფას.

# Chained Conditionals (elif)

# elif =  else/if


# ზოგჯერ არსებობს ორიზე მეტი შესაძლო სიტუაცია, და შესაბამისად, გვჭირდება ორი პირობაზე მეტი. ასეთ შემთხვევაში ვიყენებთ chained conditionals:

y = 10
x = 30

if x < y:
    print('x is less than y')
elif x > y:
    print('x is greater than y')
else:
    print('x and y are equal')

# elif რაოდენობას შეზღუდვა არ აქვს. თუ არსებობს else, ის ყოველთვის ბოლოში უნდა იყოს, მაგრამ აუცილებელი არ არის რომ გამოიყენო.


# nested conditionals

# შეგვიძლია ერთ if პირობაში გამოვიყენოთ/ჩავაშენოთ მეორე if პირობა.

# მაგალითად შეგვეძლო წინა მაგალითი ასე დაგვეწერა

if x == y:
    print('x and y are equal')
else:
    if x < y:
        print('x is less than y')
    else:
        print('x is greater than y')

# 
