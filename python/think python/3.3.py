#                           composition


import math
# აქამდე ჩვენ განვიხილეთ პროგრამის ძირითადი ელემენტები — ცვლადები, გამოსახულებები და ბრძანებები — მაგრამ ეს ყოველივე ცალ-ცალკე. ახლა ვისაუბრებთ იმაზე, თუ როგორ შეიძლება მათი გაერთიანება ერთ ფუნქციურ მთლიანად. ამ გაერთიანებას ეწოდება კომპოზიცია.



# ფუნქციის არგუმენტი შეიძლება იყოს ნებისმიერი გამოსახულება, რომელიც საბოლოოდ იძლევა რაღაც მნიშვნელობას. მაგალითად, sin() ფუნქციას შეიძლება გადავცეთ პირდაპირი რიცხვი, ცვლადი ან თუნდაც უფრო რთული გამოსახულება.
 
# მარტივად რომ ვთქვათ, შეგიძლია ერთმანეთთან დააკავშირო სხვადასხვა "გამოთვლები".

# x = math.sin(degrees / 360.0 * 2 * math.pi)

# ამ კოდში, degrees / 360.0 * 2 * math.pi ჯერ გამოითვლება, და მიღებული შედეგი გადაეცემა math.sin() ფუნქციას. ეს არის კომპოზიციის მაგალითი — ფუნქციის არგუმენტი თავად არის გამოთვლა.

# თითქმის ყველგან შეგვიცლია ჩავსვათ მნიშვნელობა. შეგვიძლოა გამოვიყენოთ ნებისმიერი მნიშვნელობა, ერთი გამონაკლისის გარდა, მინიჭების ბრძანების მარცხენა მხარეს უნდა ეწეროს ცვლადის სახელი. ნებისმიერი სხვა გამოსახულება მარცხენა მხარეს არის სინტაქსური შეცდომა.


# ფუნქციის არგუმენტად ასევე შეიძლება გადაეცეს სხვა ფუნქციის გამოძახება:

# x = math.exp(math.log(x+1))

# აქ math.log(x + 1) გამოითვლება პირველ ეტაპზე, შემდეგ კი მისი შედეგი გადაეცემა math.exp() ფუნქციას. ასეთი ჩადგმული გამოძახებები კომპოზიციის კარგი მაგალითებია.



# შეგვიძლია კომპოზიცია გამოვიყენოთ თითქმის ყველგან: გამოხატულებებში, ფუნქციებში, პირობებში და სხვა. თუმცა ერთი გამონაკლისი არსებობს — მინიჭების ბრძანების მარცხენა მხარეს უნდა იყოს ცვლადის სახელი. ნებისმიერი სხვა გამოსახულება მარცხენა მხარეს წარმოშობს სინტაქსურ შეცდომას.

hours = 3
hours = 3
minutes = hours * 60  # სწორია, რადგან მარცხენა მხარეს ცვლადია, ხოლო მარჯვნივ – გამოსახულება

hours * 60 = minutes  # ❌ არასწორია, რადგან მარცხენა მხარეს გვაქვს გამოთვლა და არა ცვლადი


# SyntaxError: can't assign to operato